import bodyAnalysis.HumanBody

// 栄養摂取時の判断を行うクラス
// 食べ過ぎないかどうかを判定する　恐怖と快楽の対立を書く
interface GetNutrition {
    val v満腹中枢が動いている人体: 満腹中枢が動いている人体
    val v貯蔵性の栄養: 脂肪を分解して糖分を生成する栄養素

    fun 栄養補給判断する(): Boolean {
        val body = v満腹中枢が動いている人体

        // ① 基本的に満腹度が上限に達していなければ補給候補とする
        if (body.満腹度 < body.満腹) {
            // ② 「筋肉の回復のための栄養素」など長期的な回復が阻害される場合、
            //     例：筋肉回復度が50未満なら、補給が必要な状態と判断する
            if (body.筋肉回復度 < 50) {
                // 備考：もし炭水化物からの糖生成が可能で、
                //       かつ体に余分な脂肪が蓄積していなければ（脂肪量が閾値未満）、
                //       補給すべきとする（＝十分な栄養供給が必要）。
                if (v貯蔵性の栄養.炭水化物生成可能() && body.脂肪量 < 30) {
                    // ③ ただし、調理可能な量が１食分（ここでは portionSize と定義）以上の場合、
                    //     あたかも「缶チューハイ」を開けたら全部飲む感覚を避けるため、無理に摂取しない
                    val portionSize = 10
                    if ((body.満腹 - body.満腹度) <= portionSize) {
                        return true
                    } else {
                        return false
                    }
                }
            }

            // ④ お腹が空いてタンパク質が分解され始め（分解率が高い＝70以上）場合、
            //     ビタミンを介して脂肪を分解し、糖を生成することができれば補給する

                if (v貯蔵性の栄養.ビタミンを使って糖生成可能()) {
                    return true
                }


            // ⑤ 上記の特別な条件に当てはまらない場合でも、
            //     満腹度が不足していれば基本的には栄養補給の必要があると判断
            return true
        } else {
            // ⑥ すでに十分（満腹度 >= 満腹）であれば補給不要
            return false
        }
    }
}
interface 脂肪を分解して糖分を生成する栄養素{
    fun 炭水化物生成可能(): Boolean
    fun ビタミンを使って糖生成可能(): Boolean
}
interface 満腹中枢が動いている人体 : HumanBody {
    val 満腹度: Int
    val 満腹: Int
    val 筋肉回復度: Int
    val 脂肪量: Int
}
interface 栄養補給判断{


}