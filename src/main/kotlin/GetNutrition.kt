import bodyAnalysis.HumanBody

// 栄養摂取時の判断を行うクラス
// 食べ過ぎないかどうかを判定する　恐怖と快楽の対立を書く
interface GetNutrition {
    val v満腹中枢が動いている人体: 満腹中枢が動いている人体
    val v貯蔵性の栄養: 脂肪を分解して糖分を生成する栄養素
    fun v糖分の生成が足りるか() =
        (v貯蔵性の栄養.炭水化物生成可能() && v満腹中枢が動いている人体.脂肪量 > v満腹中枢が動いている人体.必要脂肪量)

    fun v筋力回復に必要な栄養が足りているか(): Boolean {
        return v満腹中枢が動いている人体.血中アミノ酸濃度 > v満腹中枢が動いている人体.筋肉回復に十分な血中アミノ酸濃度
    }

    fun 栄養が足りているかの評価(): Boolean {

        // ② 糖分の生成が足りる場合、栄養補給は不要
        if (v糖分の生成が足りるか()) {
            return true // 糖分を摂取しても良い
        }

        // ③ お腹が空いている場合、栄養補給が必要
        return true
    }

    fun 今必要な栄養を急を判断する(): Boolean {
        // お腹が空いてしまった場合の後悔　殆どの場合、糖が足りないことはない。そのへんのコーヒーにいれる砂糖でも飲んどけばいい。
        // 体脂肪率が３％を切ることは稀

        // 未来の期待を正確に予測したい　何時間タンパク質とビタミンを摂取できないのか予測したい。
        // 運動したあとに不足しないような計画を立てる。現代日本では脂肪が不足している人間はほぼ居ない　ビタミン不足が問題。
        // タンパク質の不足は問題。糖分を摂取しても解決しない。
        val body = v満腹中枢が動いている人体

        // ① 空腹であっても食べないで身軽に思考できるならそちらを優先する
        return body.満腹度 < body.空腹感がもたらす利益爽快感
    }
}

interface 脂肪を分解して糖分を生成する栄養素 {
    fun 炭水化物生成可能(): Boolean
    fun ビタミンを使って糖生成可能(): Boolean
}

interface 満腹中枢が動いている人体 : HumanBody {
    val 満腹度: Int
    val 空腹感がもたらす利益爽快感: Int
    val 必要脂肪量: Int
    val 脂肪量: Int
    val 血中アミノ酸濃度: Int
    val 筋肉回復に十分な血中アミノ酸濃度: Int
}